load_file("nrngui.hoc")
load_file("LAcells_template_LFP_segconsider_all_Iinject_recordingimembrane.hoc")
load_file("interneuron_template_gj_LFP_Iinject_recordingimembrane.hoc")
//load_file("shockcondi.hoc")
//load_file("shocknocondi.hoc")
load_file("BgGen.hoc")
//load_file("function_ToneGen.hoc")
load_file("function_NetStimOR.hoc")
//load_file("function_ToneSignalGen_Th.hoc")
//load_file("function_ToneSignalGen_Ctx.hoc")
load_file("function_LoadMatrix.hoc")
//load_file("function_calcconduc.hoc")
{load_file("netparmpi.hoc")}

strdef sim_type,pulse_fake
sim_type="nopulses"    ///change simulation type here,trough,peak,randompulses,nopulses
pulse_fake="true"  //// to indicate either generate a fake pulse (only for comparison pulses in TE), set true in other situations

if (strcmp(sim_type,"trough")==0) {
detectphasetype_ind=1
} else if (strcmp(sim_type,"peak")==0) {
detectphasetype_ind=2
} else if (strcmp(sim_type,"nopulses")==0) {
detectphasetype_ind=3
} else if (strcmp(sim_type,"randompulses")==0) {
detectphasetype_ind=4
random_f=10//28//7
}                          

upscale=1
NCELL = 1000*upscale
TotalCellNum = 1000*upscale
CellNum_p=900*upscale//800
CellNum_interneuron = 100*upscale//200

///p_cell morphology///
adend_L_p=270 //um
nseg_adend_p=8 //num of seg 
pdend_L_p=555  //um
nseg_pdend_p=7
nseg_soma_p=1
diam_soma_p = 25 //um
diam_soma_p1 = 24.75 //um
diam_adend_p = 3 
diam_pdend_p = 5 

nseg_all_p=nseg_adend_p+nseg_pdend_p+nseg_soma_p

modelcompartment_num=nseg_all_p

////I_cell morphology////
dend_L_I=150  ///um
nseg_dend_I=1  ///num of seg 
nseg_soma_I=1 
diam_soma_I = 15   ////um
diam_dend_I = 10     ////um
nseg_all_I=nseg_dend_I+nseg_soma_I
modelcompartment_num_ITN=nseg_all_I

diam_shank = 25    //20-50um
extralimit = 50

objref pc,cells,cell[TotalCellNum],nc,nil//,r
pc = new ParallelContext()

cells = new List()


CellNum = 1000*upscale
celsius = 31.0  

objref Sim_length_file
objref Sim_length_rec
Sim_length_file = new File()
Sim_length_file.ropen("./input/sim_length")
Sim_length_rec = new Vector()
Sim_length_rec.scanf(Sim_length_file)


tstop = 3000000//Sim_length_rec.x[0]//96000//10000//276000//5000//276000

if (tstop>5000) {
savingspikesep=1   ///to indicate whether need to store spks seperately
}else{
savingspikesep=0   ///to indicate whether need to store spks seperately
}

if (pc.id==0) {
{load_file("function_TimeMonitor.hoc")}
}
dt = (1/2)^5//0.05//0.05//0.2//0.01

steps_per_ms= 1/dt//20//20

v_init = -70
//t0 = startsw()
//r = new Random()
/*strdef FileLocationStr_InternalSynConns
FileLocationStr_InternalSynConns = "Syn_Matrix.txt"

strdef FileLocationStr_InternalWgtConns,FileLocationStr_InternalDelConns
FileLocationStr_InternalWgtConns = "Data_InternalWgtConns.txt"
FileLocationStr_InternalDelConns = "Data_InternalDelConns.txt"
*/


//strdef gj_matrix

//gj_matrix = "gj_matrix.txt"
//////////////////////// Choose the cell type & cells applied Neuromodulation/////////////////////

strdef preface, dirstr
preface = "."

sprint(dirstr, "", preface)


//// Read Cell_type.txt ////
objref Cell_type_file
objref Cell_type_rec
Cell_type_file = new File()
Cell_type_file.ropen("./input/Cell_type.txt")
Cell_type_rec = new Vector()
Cell_type_rec.scanf(Cell_type_file)

//// Read NM.txt ////   Randomly choosen number to decide whether cell has DA and NE or not
//objref NM_file
//objref NM_rec
//NM_file = new File()
//NM_file.ropen("./input/NM.txt")
//NM_rec = new Vector()
//NM_rec.scanf(NM_file)

////Read 3D-Location information(soma)////
objref Location
Location = new Matrix()
strdef locationstr
locationstr="./input/location.txt"

Location = LoadMatrix(locationstr,TotalCellNum,3)

/*
////Read 3D-Location oritation(for 2dends)////
objref oritation
oritation = new Matrix()
strdef oritationstr
oritationstr="oritation.txt"

oritation = LoadMatrix(oritationstr,TotalCellNum,3)

////Define electrode position////
XE = 1250 // um    //3D space dimension is 2.5*1*0.6  (1250,500,300)is the oringal pos of electrode
YE = 500
ZE = 2000//300, -1300 for low, 2000 for high   
*/



////load electrode array positions and rotation info of soma for each neuron
objref oritation,elec_coords
oritation = new Matrix()
elec_coords = new Matrix()

strdef oritationstr,elec_coords_str
oritationstr="./input/oritation.txt"
elec_coords_str="./input/elec_coords.txt"

Location.muls(1e3)  //convert to um
oritation = LoadMatrix(oritationstr,TotalCellNum,3)
elec_coords = LoadMatrix(elec_coords_str,1*1*1,3)
load_file("function_calcconduc.hoc")

objref Location_single,oritation_single,elec_single
Location_single = new Vector()
oritation_single = new Vector()
elec_single = new Vector()
sigma=0.3
elec_single=elec_coords.bcopy(0,0,1,3).to_vector()


for(i=pc.id;i<NCELL;i+=pc.nhost) {              // Distribute the cells evenly among nodes

	if (i < CellNum_p){								// LAdd cell ratio A:B:C = 6:3:1
		Cell_type_ind = Cell_type_rec.x[i]	
		if (Cell_type_ind <= 5){
				cell = new Cell_A()
				cell.drv.amp=0.0//P_amp_random.repick()
		}else if(Cell_type_ind <= 8){
				cell = new Cell_B()
				cell.drv.amp=0.0//P_amp_random.repick()
		}else{
				cell = new Cell_C()
				cell.drv.amp=0.0//P_amp_random.repick()
		}
	}else{
		cell = new InterneuronCell()            // Create 200 Interneuron cells (cell 800 ~ cell 999) 
	    cell.drv.amp=0.0//I_amp_random.repick()
	}
	cells.append(cell)                          // Add this cell to the list (otherwise its lost!)
	pc.set_gid2node(i, pc.id)                   // Associate “i?with this node id
												// nc = (create netcon object on cell)
	nc = cell.connect2target(nil) 				// attach spike detector $
	nc.delay = 2
	nc.weight = 1
	pc.cell(i, nc)								// associate gid i with spike detector
												// Associate i with the netcon (so that the cluster 
	 		                                    // knows where the spikes are coming from)													
}

//////////////////////////////////////////////////////////////
//////////////  Connections for LA NET  //////////////////////
//////////////////////////////////////////////////////////////


objref nclist, cellid,bgnclist,Inplist


objref fluc[TotalCellNum][2]

//// Read Cell_list--- list of files whose output,weight changes and ca+ concentration, will be printed ////
	objref op_file
	objref op_rec
	op_file = new File()
	op_file.ropen("./input/Cell_list.txt")
	op_rec = new Vector()
	op_rec.scanf(op_file)
	cell_plots = op_rec.size
 
/////////////////////////////////////////////////////////
///////////////Pyramid cells connections/////////////////	
/////////////////////////////////////////////////////////
objref noiseRandObj[TotalCellNum][2]

////////////////////// Single-Point BACKGROUNG noise OR PYRAMIDAL CELLS //////////////////////
proc bg_input_PN () { local randseed
randseed=$1
for m = 0, CellNum_p-1{
    if(!pc.gid_exists(m)) { continue }				// Can't connect to target if it doesn't exist 
													// on the node ("continue") skips rest of code
	//bggen[m] = new BgGen(3,0,tstop,30,dt,m)
	cellid = pc.gid2cell(m)                     	// get GID object from ID	
	///for exc noise///////////////
	noiseRandObj[m][0]=new Random()
    noiseRandObj[m][0].Random123(m+randseed)  //# set lowindex to gid, set highindex to what?   
    noiseRandObj[m][0].normal(0,1)
	
	cellid.soma fluc[m][0] = new Gfluct2_exc(0.5)
    
    //fluc[m][0].std_i = 0.0264//0.0264
    fluc[m][0].g_e0 = 0.0032//0.010//0.015//0.009//0.009//0.009   cannot be too high, otherwise would saturate, same for interneuron
    fluc[m][0].std_e = 0.003//0.002//0.002//0.012		// 4 times larger
    //fluc[m][0].g_i0 = 0.09//0.09
fluc[m][0].setRandObj(noiseRandObj[m][0])

///for inh noise///////////////
	noiseRandObj[m][1]=new Random()
    noiseRandObj[m][1].Random123(m+randseed+TotalCellNum)  //# set lowindex to gid, set highindex to what?   
    noiseRandObj[m][1].normal(0,1)
	
	cellid.soma fluc[m][1] = new Gfluct2_inh(0.5)
    //fluc[m][1].std_e = 0.012//0.012		// 4 times larger   
    //fluc[m][1].g_e0 = 0.009//0.009
    fluc[m][1].g_i0 = 0.021//0.07//0.09//0.09
    fluc[m][1].std_i = 0.008//0.02//0.02//0.02//0.02//0.0264
    fluc[m][1].setRandObj(noiseRandObj[m][1])
	
}
}

obfunc noisegen() { local i localobj rlocal
rlocal = new Random()
i=$1
//j=$2
rlocal.MCellRan4(1000*(i)+1)
rlocal.negexp(1)
return rlocal
}

objref rc_Poisson2E,noise_stim[TotalCellNum],noise_random[TotalCellNum]
objref bg2LAsyn[TotalCellNum],bg2LAcon[TotalCellNum]
objref afflist_PN,afflist_ITN,afflist_build
afflist_PN=new List()
afflist_ITN=new List()
afflist_build=new List()

////Poission input
proc Poi_input_PN () { local randseed
randseed=$1
   for m = 0, CellNum_p-1{
    if(!pc.gid_exists(m)) { continue }				// Can't connect to target if it doesn't exist 
	cellid = pc.gid2cell(m) 											// on the node ("continue") skips rest of code
	noise_stim[m]= new NetStim(0.9)
	noise_stim[m].start = 0
    noise_stim[m].number = 1e1000//10//5
    
    rc_Poisson2E=new Random(m+randseed)
    Rdm_F = rc_Poisson2E.lognormal(2,1)
    //print Rdm_F
    noise_stim[m].interval = 1000/Rdm_F//50//100
    
    noise_stim[m].noise = 1
    noise_random[m]=noisegen(m)
	noise_stim[m].noiseFromRandom(noise_random[m])

    cellid.dend bg2LAsyn[m] = new bg2pyr(0.9)
    
    
    bg2LAsyn[m].initW = rc_Poisson2E.lognormal(8.5,2)
    
    del=rc_Poisson2E.uniform(0.5,1)
	bg2LAcon[m]= new NetCon(noise_stim[m],bg2LAsyn[m],1,del,1)
    afflist_build.append(bg2LAcon[m])
    }
}

  
////////////////////////////////////////////////////
//////////   Interneuroncell connection  ///////////
////////////////////////////////////////////////////

//////////////////////single point BACKGROUNG fluctuation FOR INTERNEURONS//////////////////////
proc bg_input_ITN () { local randseed
randseed=$1
for m = CellNum_p, TotalCellNum-1{
    if(!pc.gid_exists(m)) { continue }				// Can't connect to target if it doesn't exist 
													// on the node ("continue") skips rest of code		
	//bggen[m] = new BgGen(5,0,tstop,20,dt,m)
	cellid = pc.gid2cell(m)                     	// get GID object from ID	
     ///for exc noise///////////////
	noiseRandObj[m][0]=new Random()
    noiseRandObj[m][0].Random123(m+randseed)  //# set lowindex to gid, set highindex to what?   
    noiseRandObj[m][0].normal(0,1)
	
	cellid.soma fluc[m][0] = new Gfluct2_exc(0.5)
	fluc[m][0].g_e0 = 0.00121//0.005//0.0121//0.4//0.12//0.09//0.009//0.0121
    fluc[m][0].std_e = 0.00012//0.003//0.012//0.012		// 4 times larger
    //fluc[m][0].std_i = 0.0264//0.0264
    
    //fluc[m][0].g_i0 = 0.09//0.09
fluc[m][0].setRandObj(noiseRandObj[m][0])

///for inh noise///////////////
	noiseRandObj[m][1]=new Random()
    noiseRandObj[m][1].Random123(m+randseed+TotalCellNum)  //# set lowindex to gid, set highindex to what?   
    noiseRandObj[m][1].normal(0,1)
	
	cellid.soma fluc[m][1] = new Gfluct2_inh(0.5)
    //fluc[m][1].std_e = 0.012//0.012		// 4 times larger
	fluc[m][1].g_i0 = 0.00573//0.003//0.0573//0.0573
    fluc[m][1].std_i = 0.00264//0.0005//0.0264//0.0264
    //fluc[m][1].g_e0 = 0.009//0.009

    fluc[m][1].setRandObj(noiseRandObj[m][1])
}
}
////Poission input

proc Poi_input_ITN () { local randseed
randseed=$1
   for m = CellNum_p, TotalCellNum-1{
    if(!pc.gid_exists(m)) { continue }				// Can't connect to target if it doesn't exist 
	cellid = pc.gid2cell(m) 											// on the node ("continue") skips rest of code
	noise_stim[m]= new NetStim(0.9)
	noise_stim[m].start = 0
    noise_stim[m].number = 1e1000//10//5
    
    rc_Poisson2E=new Random(m+randseed)
    Rdm_F = rc_Poisson2E.lognormal(2,1)
    noise_stim[m].interval = 1000/Rdm_F//50//100
    
    noise_stim[m].noise = 1
    noise_random[m]=noisegen(m)
	noise_stim[m].noiseFromRandom(noise_random[m])

    cellid.dend bg2LAsyn[m] = new bg2pyr(0.9)
    
    
    bg2LAsyn[m].initW = rc_Poisson2E.lognormal(1,0.2)
    
    del=rc_Poisson2E.uniform(0.5,1)
	bg2LAcon[m]= new NetCon(noise_stim[m],bg2LAsyn[m],1,del,1)
    afflist_build.append(bg2LAcon[m])
    }
}
////select cells to inject optogenetic current, for control purposes////
	objref opto_file
	objref opto_rec
	///for group 1 PNs
    opto_file = new File()
	opto_file.ropen("./input/IDs_opto_PNITN.txt")
	opto_rec = new Vector()
	opto_rec.scanf(opto_file)
////////////    
 ////load light intensity file for each cell
objref lightinten_file
objref lightinten_rec
lightinten_file = new File()
lightinten_file.ropen("./input/cell_inten.txt")
lightinten_rec = new Vector()
lightinten_rec.scanf(lightinten_file)

objref opto_syn[TotalCellNum],opto_con[TotalCellNum]

for j = 0, opto_rec.size()-1{
    m=opto_rec.x[j]
    //dis=sqrt((elec_single.x[0]-Location.x[m][0])^2+(elec_single.x[1]-Location.x[m][1])^2+(elec_single.x[2]-Location.x[m][2])^2)   ///calculate dis to electrode
	if(!pc.gid_exists(m)) { continue }				// Can't connect to target if it doesn't exist 
													// on the node ("continue") skips rest of code
		cellid = pc.gid2cell(m)                     	// get GID object from ID
		cellid.soma opto_syn[m] = new ChR2_william_event(0.5)

        if (m<CellNum_p) { ////PN
        opto_syn[m].nPulses=1
        opto_syn[m].Dt_on=2
        opto_syn[m].Dt_off=1/10*1000-5
        opto_syn[m].gmax=0.05//0.04
        opto_syn[m].tauChR2=0.4
        opto_syn[m].Gd1=0.25
        opto_syn[m].Gd2=0.5
        }else {   ////interneuron
        opto_syn[m].nPulses=1
        opto_syn[m].Dt_on=2
        opto_syn[m].Dt_off=1/10*1000-5
        opto_syn[m].gmax=0.15//0.04
        opto_syn[m].tauChR2=0.4
        opto_syn[m].Gd1=0.25
        opto_syn[m].Gd2=0.5
        }
        opto_syn[m].light_intensity=0.5*lightinten_rec.x[m]

        /*if (dis<200) {     ///set light intensity
        opto_syn[m].light_intensity=5
          } else if (dis>=200&&dis<500) {
        opto_syn[m].light_intensity=3  
          } else if (dis>=500&&dis<800) {
         opto_syn[m].light_intensity=1  
          } else {
          opto_syn[m].light_intensity=0.5
          }
          */
        
        opto_con[m] = new NetCon(nil,opto_syn[m],0,0,1) 
                             
        }
        

////load several files for connection/////
//strdef E2E_syn_str,I2I_syn_str,I2P_syn_str,P2I_syn_str,GAP_syn_str
//strdef PP_size_str,II_size_str,IP_size_str,PI_size_str,GAP_size_str
strdef GAP_syn_str,GAP_size_str
//strdef E2E_wgt_str,I2I_wgt_str,I2P_wgt_str,P2I_wgt_str
//strdef E2E_del_str,I2I_del_str,I2P_del_str,P2I_del_str

strdef syn_str,syn_ind_str
sprint(syn_str,"./input/active_syn_op")
sprint(syn_ind_str,"./input/active_syn_ind")

objref syn_connect_file,syn_ind_file
syn_connect_file=new File()
syn_ind_file=new File()
syn_connect_file.ropen(syn_str)
syn_ind_file.ropen(syn_ind_str)

objref syn_connect,syn_ind
syn_connect=new Vector()
syn_ind=new Vector()
syn_connect.scanf(syn_connect_file)
syn_ind.scanf(syn_ind_file)



objref saveM
saveM = new File()

if(pc.id==0){     //"wopen" once by node 0 to clear the contents of the file
saveM.wopen("Matrix_NEW")
saveM.close()
}

{load_file("function_ConnectTwoCells.hoc")}
{load_file("function_ConnectInternal_simplify_online_op.hoc")}
Location.muls(1e-3)
for rank=0, pc.nhost-1 { // host 0 first, then 1, 2, etc.
		if (rank==pc.id) {
		//saveM.aopen("Matrix_NEW")
ConnectInternal()

}
pc.barrier()
}
Location.muls(1e3)

//////voltage record by Feng////////////////////////////////////////////////////////////////////////////
objref Volrec[TotalCellNum], vollist
vollist = new List()

proc RecVol() {  local i
for i=0,cell_plots-1{
op = op_rec.x[i]
if(pc.gid_exists(op)){
cellid = pc.gid2cell(op)
Volrec[op] = new Vector()
Volrec[op].record(&cellid.soma.v(0.5),1)
vollist.append(Volrec[op])
}
}
}
//RecVol()

//////voltage bg noise current by Feng////////////////////////////////////////////////////////////////////////////
objref bgnoise[TotalCellNum][4], bgnoiselist_exc,bgnoiselist_inh
bgnoiselist_exc = new List()
bgnoiselist_inh = new List()


proc Recbgnoiselist() {  local i
for i=0,cell_plots-1{
op = op_rec.x[i]
if(pc.gid_exists(op)){
cellid = pc.gid2cell(op)

bgnoise[op][0] = new Vector()   ///for exc
bgnoise[op][0].record(&fluc[op][0].i_exc,1)  //g_e

bgnoise[op][1] = new Vector()  ///for inh
bgnoise[op][1].record(&fluc[op][1].i_inh,1)  //g_i

bgnoise[op][2] = new Vector()   ///for exc
bgnoise[op][2].record(&fluc[op][0].g_e,1)  //

bgnoise[op][3] = new Vector()  ///for inh
bgnoise[op][3].record(&fluc[op][1].g_i,1)  //


bgnoiselist_exc.append(bgnoise[op][0])
bgnoiselist_exc.append(bgnoise[op][2])

bgnoiselist_inh.append(bgnoise[op][1])
bgnoiselist_inh.append(bgnoise[op][3])



}
}
}
//Recbgnoiselist()

//////aff conductance&current by Feng////////////////////////////////////////////////////////////////////////////
objref aff[TotalCellNum][4], aff_exc//,aff_exc_i
aff_exc = new List()
//aff_exc_i = new List()


proc Recaffcurrlist() {  local i

for i=0,cell_plots-1{
op = op_rec.x[i]
if(pc.gid_exists(op)){
cellid = pc.gid2cell(op)

aff[op][0] = new Vector()   ///for exc
aff[op][0].record(&bg2LAsyn[op].iampa,1)  //current

//aff[op][1] = new Vector()  ///for inh
//aff[op][1].record(&bg2LAcon[i].i_inh,1)  //g_i

aff[op][1] = new Vector()   ///for exc
aff[op][1].record(&bg2LAsyn[op].g_ampa_t,1)  // total conductance

//aff[op][3] = new Vector()  ///for inh
//aff[op][3].record(&bg2LAcon[i].g_i,1)  


aff_exc.append(aff[op][0])
aff_exc.append(aff[op][1])

//bgnoiselist_inh.append(aff[op][1])
//bgnoiselist_inh.append(aff[op][3])



}
}
}




//////Poisson record by Feng////////////////////////////////////////////////////////////////////////////
objref Poissonaff[TotalCellNum]//, vollist
//vollist = new List()

proc RecPoissonaff() {  local i
for i=0,cell_plots-1{
op = op_rec.x[i]
if(pc.gid_exists(op)){
cellid = pc.gid2cell(op)

Poissonaff[op] = new Vector()
bg2LAcon[op].record(Poissonaff[op])

if (op<CellNum_p) {

afflist_PN.append(Poissonaff[op])

} else {
afflist_ITN.append(Poissonaff[op])

}
}
}
}


objref tvec, idvec 										// will be Vectors that record all spike times (tvec)
														// and the corresponding id numbers of the cells that spiked (idvec)
proc spikerecord() {local i localobj nc, nil

	tvec = new Vector()
	idvec = new Vector()
	for i=0, cells.count-1 {
	  nc = cells.object(i).connect2target(nil)
	  nc.record(tvec, idvec, nc.srcgid)
														// the Vector will continue to record spike times even after the NetCon has been destroyed
	}
}

//spikerecord()

/////record input////
objref f_Bg
strdef Input

proc recinput() {
for i = 0,CellNum_p-1 {
if(!pc.gid_exists(i)) { continue }
cellid = pc.gid2cell(i)
if (cellid.baglist.count()>0) {
for j=0,cellid.baglist.count()-1{
    f_Bg = new File()
	sprint(Input,"/data/ffeng/inputs/inputs_%d_%d",i,j)
	f_Bg.wopen(Input)
	cellid.baglist.o[j].printf(f_Bg)
	f_Bg.close()
}
}
}
}
//recinput()



///to find noise recording length
root_cell_id=3
///to define length of noise automatically

objref bgnoisesrecording_len
objref excnoise_list_percore_PN,inhnoise_list_percore_PN,excnoise_list_percore_ITN,inhnoise_list_percore_ITN


objref noise_n,noise_i

proc initbgnoiserecord() {
noise_n=new Vector(1)
noise_i=new Vector(1)
bgnoisesrecording_len=new Vector(1)
excnoise_list_percore_PN=new List()
excnoise_list_percore_ITN=new List()
inhnoise_list_percore_PN=new List()
inhnoise_list_percore_ITN=new List()


if (pc.gid_exists(root_cell_id)) { 
cellid = pc.gid2cell(root_cell_id)
bgnoisesrecording_len.x[0]=bgnoiselist_exc.o[bgnoiselist_exc.index(bgnoise[root_cell_id][0])].size()//length of recorded LFP is dependent on simulation time and recording resolution
}
pc.barrier()
pc.allreduce(bgnoisesrecording_len,1)
//print "xxxxx=", vollist.o[vollist.index(Volrec[root_cell_id])].size()

for bb=0,bgnoiselist_exc.count()-1 {  ///prepare for storing volts
excnoise_list_percore_PN.append(new Vector(bgnoisesrecording_len.x[0]))
excnoise_list_percore_ITN.append(new Vector(bgnoisesrecording_len.x[0]))

//excnoise_list_percore.append(new Vector(bgnoisesrecording_len.x[0]))
inhnoise_list_percore_PN.append(new Vector(bgnoisesrecording_len.x[0]))
inhnoise_list_percore_ITN.append(new Vector(bgnoisesrecording_len.x[0]))
}


}

objref bgnoise_temp_exc,bgnoise_temp_inh

proc avebgnoise() {
//elec_single=elec_coords.bcopy(0,0,1,3).to_vector()
for op = 0,CellNum-1 {
        if(pc.gid_exists(op)){ 
         //dis=sqrt((elec_single.x[0]-Location.x[op][0])^2+(elec_single.x[1]-Location.x[op][1])^2+(elec_single.x[2]-Location.x[op][2])^2)
          //for bb=0,dis_bound.size()-2 {
            
              //if (dis>=dis_bound.x[bb]&&dis<dis_bound.x[bb+1]) {
              bgnoise_temp_exc=new Vector()
              bgnoise_temp_exc=bgnoiselist_exc.o[bgnoiselist_exc.index(bgnoise[op][0])]  ///current vector
              bgnoise_temp_inh=new Vector()
              bgnoise_temp_inh=bgnoiselist_inh.o[bgnoiselist_inh.index(bgnoise[op][1])]  ///current vector
              //print "volts size= ", volts_temp.size()
             ///PN type
              //print "vpn_list_percore= ", vpn_list_percore.o[0].size()
              if (op<CellNum_p) {
              excnoise_list_percore_PN.o[0].add(bgnoise_temp_exc)
              inhnoise_list_percore_PN.o[0].add(bgnoise_temp_inh)
              } else {
              excnoise_list_percore_ITN.o[0].add(bgnoise_temp_exc)
              inhnoise_list_percore_ITN.o[0].add(bgnoise_temp_inh)
              }
              
              bgnoise_temp_exc=new Vector()
              bgnoise_temp_exc=bgnoiselist_exc.o[bgnoiselist_exc.index(bgnoise[op][2])]  ///conduct vector
              bgnoise_temp_inh=new Vector()
              bgnoise_temp_inh=bgnoiselist_inh.o[bgnoiselist_inh.index(bgnoise[op][3])]  ///conduct vector
              
              /* excnoise_list_percore.o[1].add(bgnoise_temp_exc)
              inhnoise_list_percore.o[1].add(bgnoise_temp_inh) */
              
              if (op<CellNum_p) {
              excnoise_list_percore_PN.o[1].add(bgnoise_temp_exc)
              inhnoise_list_percore_PN.o[1].add(bgnoise_temp_inh)
              noise_n.x[0]+=1  ///record number
              
              } else {
              excnoise_list_percore_ITN.o[1].add(bgnoise_temp_exc)
              inhnoise_list_percore_ITN.o[1].add(bgnoise_temp_inh)
              noise_i.x[0]+=1  ///record number

              }
              
              
              

              
              //break  ///if found the right category, then break the loop
              
              //}
          
                  //                  }
                              }
                    }
 pc.barrier()// wait for all hosts to get to this point    
 
 pc.allreduce(noise_n,1)
 pc.allreduce(noise_i,1)
 //pc.allreduce(vc_n,1)
 //pc.allreduce(vi_n,1)
 pc.barrier()// wait for all hosts to get to this point                   

   //for bb=0,dis_bound.size()-2 { ///sum-up contributions from each host to have volt
   pc.allreduce(excnoise_list_percore_PN.o[0],1) 
   pc.allreduce(excnoise_list_percore_PN.o[1],1)
   pc.allreduce(excnoise_list_percore_ITN.o[0],1) 
   pc.allreduce(excnoise_list_percore_ITN.o[1],1)
   //pc.allreduce(vc_list_percore.o[bb],1)
   pc.allreduce(inhnoise_list_percore_PN.o[0],1)
   pc.allreduce(inhnoise_list_percore_PN.o[1],1)
   pc.allreduce(inhnoise_list_percore_ITN.o[0],1)
   pc.allreduce(inhnoise_list_percore_ITN.o[1],1)

   
   excnoise_list_percore_PN.o[0].div(noise_n.x[0])
   excnoise_list_percore_PN.o[1].div(noise_n.x[0])
   
   excnoise_list_percore_ITN.o[0].div(noise_i.x[0])
   excnoise_list_percore_ITN.o[1].div(noise_i.x[0])
   //vc_list_percore.o[bb].div(vc_n.x[bb])
   inhnoise_list_percore_PN.o[0].div(noise_n.x[0])
   inhnoise_list_percore_PN.o[1].div(noise_n.x[0])
   
   inhnoise_list_percore_ITN.o[0].div(noise_i.x[0])
   inhnoise_list_percore_ITN.o[1].div(noise_i.x[0]) 
   
   
   //}
   
}
//aveVol()

objref avenoise_file_PN,avenoise_file_ITN


proc bgnoisewrite() {

if (pc.id==0){
print "PN num recorded = ", noise_n.printf
print "ITN num recorded = ", noise_i.printf

   strdef ave_noise_PN,ave_noise_ITN
   sprint(ave_noise_PN,"./ave_noise_PN")
   sprint(ave_noise_ITN,"./ave_noise_ITN")
   
   avenoise_file_PN=new File()
   avenoise_file_PN.wopen(ave_noise_PN)
   avenoise_file_ITN=new File()
   avenoise_file_ITN.wopen(ave_noise_ITN)
   
   for i=0, excnoise_list_percore_PN.o[0].size()-1 {   ///excluding zero paddings
	avenoise_file_PN.printf("%g\t%g\t%g\t%g\n", excnoise_list_percore_PN.o[0].x[i], inhnoise_list_percore_PN.o[0].x[i],excnoise_list_percore_PN.o[1].x[i], inhnoise_list_percore_PN.o[1].x[i])	//    0 1 exc and inh current, 2, 3 exc and inh conduct  
        }
   //vpn_list_percore.o[0].printf(avevolts_single_file)
   avenoise_file_PN.close()
   
   for i=0, excnoise_list_percore_ITN.o[0].size()-1 {   ///excluding zero paddings
	avenoise_file_ITN.printf("%g\t%g\t%g\t%g\n", excnoise_list_percore_ITN.o[0].x[i], inhnoise_list_percore_ITN.o[0].x[i],excnoise_list_percore_ITN.o[1].x[i], inhnoise_list_percore_ITN.o[1].x[i])	//   0 1 exc and inh current, 2, 3 exc and inh conduct       
        }
   //vpn_list_percore.o[0].printf(avevolts_single_file)
   avenoise_file_ITN.close()
/* 
   sprint(ave_volts,"./volts/ave_volts_ITN_%d",bb) 
   avevolts_single_file=new File()
   avevolts_single_file.wopen(ave_volts)
   vi_list_percore.o[0].printf(avevolts_single_file)
   avevolts_single_file.close() */
   
  //pc.barrier ()    // wait for all hosts to get to this point
  
}
}

////////////////for calculating and recording ave aff curr/////////////////////////////
///to define length of aff curr automatically

objref affcurrcording_len
objref excaff_list_percore_PN,excaff_list_percore_ITN


objref aff_n,aff_i

proc initaffcurrrecord() {
aff_n=new Vector(1)
aff_i=new Vector(1)
affcurrcording_len=new Vector(1)
excaff_list_percore_PN=new List()
excaff_list_percore_ITN=new List()



if (pc.gid_exists(root_cell_id)) { 
cellid = pc.gid2cell(root_cell_id)
affcurrcording_len.x[0]=aff_exc.o[aff_exc.index(aff[root_cell_id][0])].size()//length of recorded LFP is dependent on simulation time and recording resolution
}
pc.barrier()
pc.allreduce(affcurrcording_len,1)
//print "xxxxx=", vollist.o[vollist.index(Volrec[root_cell_id])].size()

for bb=0,aff_exc.count()-1 {  ///prepare for storing volts
excaff_list_percore_PN.append(new Vector(affcurrcording_len.x[0]))
excaff_list_percore_ITN.append(new Vector(affcurrcording_len.x[0]))

//excnoise_list_percore.append(new Vector(bgnoisesrecording_len.x[0]))
//inhnoise_list_percore_PN.append(new Vector(affcurrcording_len.x[0]))
//inhnoise_list_percore_ITN.append(new Vector(affcurrcording_len.x[0]))
}


}

objref aff_temp_exc//,bgnoise_temp_inh

proc aveaffcurr() {
//elec_single=elec_coords.bcopy(0,0,1,3).to_vector()
for op = 0,CellNum-1 {
        if(pc.gid_exists(op)){ 
         //dis=sqrt((elec_single.x[0]-Location.x[op][0])^2+(elec_single.x[1]-Location.x[op][1])^2+(elec_single.x[2]-Location.x[op][2])^2)
          //for bb=0,dis_bound.size()-2 {
            
              //if (dis>=dis_bound.x[bb]&&dis<dis_bound.x[bb+1]) {
              aff_temp_exc=new Vector()
              aff_temp_exc=aff_exc.o[aff_exc.index(aff[op][0])]  ///current vector
              //bgnoise_temp_inh=new Vector()
              //bgnoise_temp_inh=bgnoiselist_inh.o[bgnoiselist_inh.index(bgnoise[op][1])]  ///current vector
              //print "volts size= ", volts_temp.size()
             ///PN type
              //print "vpn_list_percore= ", vpn_list_percore.o[0].size()
              if (op<CellNum_p) {
              excaff_list_percore_PN.o[0].add(aff_temp_exc)
              //inhnoise_list_percore_PN.o[0].add(aff_temp_exc)
              } else {
              excaff_list_percore_ITN.o[0].add(aff_temp_exc)
              //inhnoise_list_percore_ITN.o[0].add(bgnoise_temp_inh)
              }
              
              aff_temp_exc=new Vector()
              aff_temp_exc=aff_exc.o[aff_exc.index(aff[op][1])]  ///conduct vector
              //bgnoise_temp_inh=new Vector()
              //bgnoise_temp_inh=bgnoiselist_inh.o[bgnoiselist_inh.index(bgnoise[op][3])]  ///conduct vector
              
              /* excnoise_list_percore.o[1].add(bgnoise_temp_exc)
              inhnoise_list_percore.o[1].add(bgnoise_temp_inh) */
              
              if (op<CellNum_p) {
              excaff_list_percore_PN.o[1].add(aff_temp_exc)
              //inhnoise_list_percore_PN.o[1].add(bgnoise_temp_inh)
              aff_n.x[0]+=1  ///record number
              
              } else {
              excaff_list_percore_ITN.o[1].add(aff_temp_exc)
              //inhnoise_list_percore_ITN.o[1].add(bgnoise_temp_inh)
              aff_i.x[0]+=1  ///record number

              }
              
              
              

              
              //break  ///if found the right category, then break the loop
              
              //}
          
                  //                  }
                              }
                    }
 pc.barrier()// wait for all hosts to get to this point    
 
 pc.allreduce(aff_n,1)
 pc.allreduce(aff_i,1)
 //pc.allreduce(vc_n,1)
 //pc.allreduce(vi_n,1)
 pc.barrier()// wait for all hosts to get to this point                   

   //for bb=0,dis_bound.size()-2 { ///sum-up contributions from each host to have volt
   pc.allreduce(excaff_list_percore_PN.o[0],1) 
   pc.allreduce(excaff_list_percore_PN.o[1],1)
   pc.allreduce(excaff_list_percore_ITN.o[0],1) 
   pc.allreduce(excaff_list_percore_ITN.o[1],1)
   //pc.allreduce(vc_list_percore.o[bb],1)
   //pc.allreduce(inhnoise_list_percore_PN.o[0],1)
   //pc.allreduce(inhnoise_list_percore_PN.o[1],1)
   //pc.allreduce(inhnoise_list_percore_ITN.o[0],1)
   //pc.allreduce(inhnoise_list_percore_ITN.o[1],1)

   
   excaff_list_percore_PN.o[0].div(aff_n.x[0])
   excaff_list_percore_PN.o[1].div(aff_n.x[0])
   
   excaff_list_percore_ITN.o[0].div(aff_i.x[0])
   excaff_list_percore_ITN.o[1].div(aff_i.x[0])
   //vc_list_percore.o[bb].div(vc_n.x[bb])
   //inhnoise_list_percore_PN.o[0].div(noise_n.x[0])
   //inhnoise_list_percore_PN.o[1].div(noise_n.x[0])
   
   //inhnoise_list_percore_ITN.o[0].div(noise_i.x[0])
   //inhnoise_list_percore_ITN.o[1].div(noise_i.x[0]) 
   
   
   //}
   
}


objref aveaff_file_PN,aveaff_file_ITN


proc affcurrwrite() {

if (pc.id==0){
print "PN num recorded for aff curr= ", aff_n.printf
print "ITN num recorded for aff curr= ", aff_i.printf

   strdef ave_aff_PN,ave_aff_ITN
   sprint(ave_aff_PN,"./ave_affcurr_PN")
   sprint(ave_aff_ITN,"./ave_affcurr_ITN")
   
   aveaff_file_PN=new File()
   aveaff_file_PN.wopen(ave_aff_PN)
   aveaff_file_ITN=new File()
   aveaff_file_ITN.wopen(ave_aff_ITN)
   
   for i=0, excaff_list_percore_PN.o[0].size()-1 {   ///excluding zero paddings
	aveaff_file_PN.printf("%g\t%g\n", excaff_list_percore_PN.o[0].x[i], excaff_list_percore_PN.o[1].x[i])	//    0 1 exc curr and conduc  
        }
   //vpn_list_percore.o[0].printf(avevolts_single_file)
   aveaff_file_PN.close()
   
   for i=0, excnoise_list_percore_ITN.o[0].size()-1 {   ///excluding zero paddings
	aveaff_file_ITN.printf("%g\t%g\n", excaff_list_percore_ITN.o[0].x[i], excaff_list_percore_ITN.o[1].x[i])	//   0 1 exc curr and conduc       
        }
   //vpn_list_percore.o[0].printf(avevolts_single_file)
   aveaff_file_ITN.close()
/* 
   sprint(ave_volts,"./volts/ave_volts_ITN_%d",bb) 
   avevolts_single_file=new File()
   avevolts_single_file.wopen(ave_volts)
   vi_list_percore.o[0].printf(avevolts_single_file)
   avevolts_single_file.close() */
   
  //pc.barrier ()    // wait for all hosts to get to this point
  
}
}

////////////////for calculating and recording ave voltages///////////////////////////

///to define length of volts automatically

objref vpn_list_percore,vi_list_percore,voltsrecording_len


objref vpn_n,vi_n

proc initVoltsrecord() {
vpn_n=new Vector(1)
vi_n=new Vector(1)
voltsrecording_len=new Vector(1)
vpn_list_percore=new List()
vi_list_percore=new List()

if (pc.gid_exists(root_cell_id)) { 
cellid = pc.gid2cell(root_cell_id)
voltsrecording_len.x[0]=vollist.o[vollist.index(Volrec[root_cell_id])].size()//length of recorded LFP is dependent on simulation time and recording resolution
}
pc.barrier()
pc.allreduce(voltsrecording_len,1)
//print "xxxxx=", vollist.o[vollist.index(Volrec[root_cell_id])].size()
//for bb=0,dis_bound.size()-2 {  ///prepare for storing volts
vpn_list_percore.append(new Vector(voltsrecording_len.x[0]))
vi_list_percore.append(new Vector(voltsrecording_len.x[0]))
//}
}
objref volts_temp
proc aveVol() {
//elec_single=elec_coords.bcopy(0,0,1,3).to_vector()
for op = 0,CellNum-1 {
        if(pc.gid_exists(op)){ 
         //dis=sqrt((elec_single.x[0]-Location.x[op][0])^2+(elec_single.x[1]-Location.x[op][1])^2+(elec_single.x[2]-Location.x[op][2])^2)
          //for bb=0,dis_bound.size()-2 {
            
              //if (dis>=dis_bound.x[bb]&&dis<dis_bound.x[bb+1]) {
              volts_temp=new Vector()
              volts_temp=vollist.o[vollist.index(Volrec[op])]  ///volts vector
              //print "volts size= ", volts_temp.size()
              if (Cell_type_rec.x[op]<= 50) {///PN type
              //print "vpn_list_percore= ", vpn_list_percore.o[0].size()
              vpn_list_percore.o[0].add(volts_temp)
              vpn_n.x[0]+=1  ///record number
              } /* else if (Cell_type_rec.x[op]<= 50){///C type
              vc_list_percore.o[bb].add(volts_temp)
              vc_n.x[bb]+=1   ///record number
              } */ else { //INT type
              vi_list_percore.o[0].add(volts_temp)
              vi_n.x[0]+=1    ///record number           
              }
              
              //break  ///if found the right category, then break the loop
              
              //}
          
                  //                  }
                              }
                    }
 pc.barrier()// wait for all hosts to get to this point    
 
 pc.allreduce(vpn_n,1)
 //pc.allreduce(vc_n,1)
 pc.allreduce(vi_n,1)
 pc.barrier()// wait for all hosts to get to this point                   

   //for bb=0,dis_bound.size()-2 { ///sum-up contributions from each host to have volt
   pc.allreduce(vpn_list_percore.o[0],1) 
   //pc.allreduce(vc_list_percore.o[bb],1)
   pc.allreduce(vi_list_percore.o[0],1)

   
   vpn_list_percore.o[0].div(vpn_n.x[0])
   //vc_list_percore.o[bb].div(vc_n.x[bb])
   vi_list_percore.o[0].div(vi_n.x[0])
   
   //}
   
}

objref avevolts_single_file

proc Volwrite() {
randomburst=$1
runs=$2
if (pc.id==0){
print "PN type cell = ", vpn_n.printf
print "i type cell = ", vi_n.printf

   strdef ave_volts
   sprint(ave_volts,"./volts/ave_volts") 
   avevolts_single_file=new File()
   avevolts_single_file.wopen(ave_volts)
   
   for i=0, vpn_list_percore.o[0].size()-1 {   ///excluding zero paddings
	avevolts_single_file.printf("%g\t%g\n", vpn_list_percore.o[0].x[i], vi_list_percore.o[0].x[i])	//first column is PN, second is for ITN
        }
   //vpn_list_percore.o[0].printf(avevolts_single_file)
   avevolts_single_file.close()
/* 
   sprint(ave_volts,"./volts/ave_volts_ITN_%d",bb) 
   avevolts_single_file=new File()
   avevolts_single_file.wopen(ave_volts)
   vi_list_percore.o[0].printf(avevolts_single_file)
   avevolts_single_file.close() */
   
  //pc.barrier ()    // wait for all hosts to get to this point
  
}
}


proc precalc_conduc()  { local m,op localobj conduct_comp_PN,conduct_comp_ITN////pre calculate conductance for each cell

for (m=0; m<elec_coords.nrow();m+=1) { // calculate LFP per electrode

elec_single=elec_coords.bcopy(m,0,1,3).to_vector()
//LFP_per_core=new Vector(LFPrecording_len.x[0])    ////to record sum of LFP per core based on the same electrode
//print LFP_per_core.size()
 //print LFP_per_core.size() 
     for op = 0,CellNum-1 {
       //op = op_rec_LFP.x[j]
        if(pc.gid_exists(op)){ 
         dis=sqrt((elec_single.x[0]-Location.x[op][0])^2+(elec_single.x[1]-Location.x[op][1])^2+(elec_single.x[2]-Location.x[op][2])^2)
          //print dis
          //if (dis<=10e120)  {    //only cells within 500um of electrodes will be counted
         cellid = pc.gid2cell(op)
         Location_single=Location.bcopy(op,0,1,3).to_vector()  ///copy single cell' location info.
         oritation_single=oritation.bcopy(op,0,1,3).to_vector() ///copy single cell' oritation info.
  
        // LFP_multi[m]=new Vector(LFPrecoridng_len)
             
             conduct_comp_PN=new Vector(modelcompartment_num)
             conduct_comp_ITN=new Vector(modelcompartment_num_ITN)

             if (op<CellNum_p) {  /// for PNs               
                 
                 for (i=0; i<modelcompartment_num; i+=1) {  ///i stands for segment
                conduct_comp_PN.x[i]=calcconduc_PN(Location_single,i,oritation_single,elec_single,dis)  //i=0 for soma, 1-8 for adend, 9-15 for pdend
                                 
                    }
                 cellid.conduclist.insrt(m,conduct_comp_PN)   
                    
                } else {  /// for ITNs 
                  for (i=0; i<modelcompartment_num_ITN; i+=1) {  ///i stands for segment
                  conduct_comp_ITN.x[i]=calcconduc_ITN(Location_single,i,oritation_single,elec_single,dis)  //i=0 for soma, 1-8 for adend, 9-15 for pdend
                   

                   }
                  cellid.conduclist.insrt(m,conduct_comp_ITN)
                   
              }
               
            }
           }

}
}
precalc_conduc()


objref LFPvec,LFPvec_filtered//,vlfp
//objref LFPvec_amp,lfplist_amp,LFPvec_filtered_amp                                           
lfp_dt=1  ///define time step for calculating
         // For this time step, create a vector with entries of time and average LFP
//lfplist=new List()
//LFPvec=new List()
//LFPvec_filtered=new List()

//lfplist_amp=new List()
//LFPvec_amp=new List()
//LFPvec_filtered_amp=new List()                      
load_file("function_filter&detection.hoc")

objref filtered_signal//,filtered_signal_amp

proc initLFPvec () {   ////initilize LFP-related vec
if (pc.id==0) {
 //print filtered_signal.size()
 //for (m=0; m<elec_coords.nrow();m+=1) {
  ////for phase detection 
LFPvec=new List()
LFPvec_filtered=new List()
  
 for i=0,2*filter_order-1 {
 filtered_signal=new Vector(elec_coords.nrow())  //tstop+1+2*filter_order
 //filtered_signal.x[0]=append(0)   ////fill in zeros
 LFPvec.append(filtered_signal)
 LFPvec_filtered.append(filtered_signal)
 }
  ////for amp detection
 /*for i=0,2*filter_order_amp-1 {
 filtered_signal_amp=new Vector(elec_coords.nrow())  //tstop+1+2*filter_order
 //filtered_signal.x[0]=append(0)   ////fill in zeros
 LFPvec_amp.append(filtered_signal_amp)
 LFPvec_filtered_amp.append(filtered_signal)
 }
  */                   
 //}
}
pc.barrier()
}


////define for detection
objref pulse,pulseSnip,pulse_times
t_window=100  ////time moving window for detection
pulse_window=10   /////to make sure pulse interval is greater than pulse_window


pulse=new Vector(pulse_window+1)  ///to store pulse logic at each LFP step
pulse_times=new Vector() ///to store real time of pulse at each LFP step
pulseSnip=new Vector() ///snippet of pulse within pulse interval window
//pulse_times_actual=new Vector()///to store actual evoked pulse time                      

objref random_t               

proc calc_LFP() { localobj vlfp
vlfp=new Vector(elec_coords.nrow())  

for (m=0; m<elec_coords.nrow();m+=1) { // calculate LFP per electrode
     //vlfp.x[m] = 0 // Initialize the LFP variable
     
for op = 0,CellNum-1 {
       //op = op_rec_LFP.x[j]
        if (pc.gid_exists(op)) { 
        cellid = pc.gid2cell(op)
        //access cellid.soma
         j=0
        forsec cellid.all {
        
         if (ismembrane("extracellular")){
     
               //print secname()
            for (x,0) {
			vlfp.x[m] = vlfp.x[m] + (er_xtraimemrec(x) * cellid.conduclist.o(m).x[j])
            //print x,secname(),j//cellid.conduclist.o(m).x[j],
            //print er_xtraimemrec(x)
			j = j + 1        
                      }
                }    
                              }
                       }
                                       }
                                       }
 
 pc.barrier()
 pc.allreduce(vlfp,1) 
 
 if (pc.id==0) {
 //LFPvec = new List()
               //access cell_3.dend
               //print secname()
//return vlfp
  LFPvec.append(vlfp)
  //LFPvec_amp.append(vlfp)
  filtered_signal=new Vector(elec_coords.nrow())
  //filtered_signal_amp=new Vector(elec_coords.nrow())
 for (mm=0; mm<elec_coords.nrow();mm+=1) {
  filtered_signal.x[mm]=filter_realtime(LFPvec,LFPvec_filtered,filter_order,mm) 
  //filtered_signal_amp.x[mm]=filter_realtime_amp(LFPvec_amp,LFPvec_filtered_amp,filter_order_amp,mm) 
                                          }
  //filtered_signal.printf
  LFPvec_filtered.append(filtered_signal)
  //LFPvec_filtered_amp.append(filtered_signal_amp)
  }
  pc.barrier()
//lfplist.append(LFPvec.c)  
//LFPvec.printf

//cvode_active(1)

/////for detection//////
   
if (pc.id==0&&t>=t_window+1) {
    if (detectphasetype_ind<3) {
pulseSnip=pulse.at((pulse.size()-1-pulse_window),pulse.size()-1)
if (pulseSnip.sum()>=1) {    // check if a pulse has been delivered within the last 10 ms, and if so, don't generate a new pulse
        pulse.append(0) 
    } else {

    //print "hello"
    trigerNow=detect(LFPvec_filtered,t_window,thres=0.04,type=detectphasetype_ind,electro_seq=0,sigv=4)   ///type 1 trough, 2 peak
    pulse.append(trigerNow)
    if (trigerNow>0&&t>1000) {
    //print t
    pulse_times.append(t)
    }
}

} else (detectphasetype_ind==4) {  ////for random pulses

    if (t>1000) {
    //print t
    //random_t=new Random(loooo)  ///if random pulses, loooo to make each run have different random seeds
    if (random_f*lfp_dt>(1000*random_t.uniform(0,1))){    ///poisson random pulses
     pulse_times.append(t)
     if (pulse_times.size()>=2&&((pulse_times.x[pulse_times.size()-1]-pulse_times.x[pulse_times.size()-2])<=pulse_window)) {
     pulse_times.remove(pulse_times.size()-1)  ///remove pulses interval greater than 10ms
     }
     
    }
    
    }
    

}

}


pc.broadcast(pulse_times,0)   ///broadcast pulsetime to all host
pc.barrier()
 
if (detectphasetype_ind!=3&&(strcmp(pulse_fake,"fake")!=0)) {  ///only generate event when type is trough or peak or random

if (pulse_times.size()>0) {
//if (pc.id==1) {
//print 	"pulsetimes on id1: ", pulse_times.printf
//}
 if (pulse_times.x[pulse_times.size()-1]>=t) {
for j = 0, opto_rec.size()-1{
       op=opto_rec.x[j]
	if(!pc.gid_exists(op)) { continue }
     //print 	"pulsetimes: ", pulse_times.x[pulse_times.size()-1]
     //print "t ", t
    opto_con[op].event(pulse_times.x[pulse_times.size()-1])
    //print "PCID: ", pc.id
    //print "m: ", m
}
}
}

}
pc.barrier()

cvode.event(t + lfp_dt, "calc_LFP()")		

}


    
//calc_LFP()

///calculate LFP real-time////
objref fih2,LFP_allruns,LFP_filtered_allruns
LFP_allruns=new List()  ///store all LFPs during different runs
LFP_filtered_allruns= new List() ///store all LFPs during different runs
runnum=1 ///defind the run number here
proc rrun(){									// Run the network simulation and write out the results

												//  vectors pnm.spikevec (spiketimes) and pnm.idvec (gids)
												
	//local_minimum_delay = pc.set_maxstep(maxstepval)	// Set every machine's max step size to minimum delay of
														//  all netcons created on pc using pc.gid_connect, but
														//  not larger than 10
  //finitialize(v_init)
									// Call the init fcn (which is redefined in this code) and
												//  then make other standard calls
for runs=0,runnum-1 {
	//runstart = startsw()						// Get the start time of the simulation
	//cvode.solve(tstop)
    ////random part
    random_t=new Random(runs+1) //for random pulses generation
    bg_input_PN(runs*2000+3000)
    Poi_input_PN(runs*2000+3000)
    bg_input_ITN(runs*2000+3000)
    Poi_input_ITN(runs*2000+3000)
    ////////
    RecVol()
    Recbgnoiselist()
    Recaffcurrlist()
   initLFPvec() ///initilize LFP-related vect for each run
   RecPoissonaff()
   spikerecord()
     ////////
   fih2 = new FInitializeHandler("calc_LFP()")
    {pc.set_maxstep(10)}
    stdinit()	
    pc.psolve(tstop)  // Equivalent to calling cvode.solve(tstop) but for parallel NEURON;
    
    if (pc.id==0) {
    LFP_allruns.append(LFPvec)
    LFP_filtered_allruns.append(LFPvec_filtered)
    }
    
    ///////collecting and calculating ave volts
    initVoltsrecord()
    aveVol()
    Volwrite(randomburst,runs)
    
    }
    
    }

rrun()


proc LFPwrite() {localobj LFP_single_file,LFP_filter_file,LFP_filter_amp_file,lfpvec,lfpvec_filter,runnum_vec//,lfpvec_filter_amp
 if(pc.id==0){     //open write files on host 0
   strdef LFPs,LFPs_filter,LFPs_filter_amp
   sprint(LFPs,"./LFPs/LFP_elec_combine") 
   sprint(LFPs_filter,"./LFPs/LFP_elec_combine_filter")
   //sprint(LFPs_filter_amp,"./LFPs/LFP_elec_combine_filter_amp")

   LFP_single_file=new File()
   LFP_single_file.wopen(LFPs)
   //LFP_single_file.printf("%g\n",runnum)  ///put number of runs first
   
   LFP_filter_file=new File()
   LFP_filter_file.wopen(LFPs_filter)
   //LFP_filter_file.printf("%g\n",runnum)  ///put number of runs first
   
   //LFP_filter_amp_file=new File()
   //LFP_filter_amp_file.wopen(LFPs_filter_amp)  
   
for k=0,runnum-1 {
    for i=2*filter_order, LFPvec.count()-1 {   ///excluding zero paddings       
        lfpvec = LFP_allruns.o(k).o(i)
        lfpvec.printf(LFP_single_file,"%g")
        
        lfpvec_filter=LFP_filtered_allruns.o(k).o(i)
        lfpvec_filter.printf(LFP_filter_file,"%g")
      } 
    }

    
   //for i=2*filter_order_amp, LFPvec_amp.count()-1 {   ///excluding zero paddings
                
        //lfpvec_filter_amp=LFPvec_filtered_amp.o(i)
        //lfpvec_filter_amp.printf(LFP_filter_amp_file,"%g")
        
    //}
        
   LFP_single_file.close()
   LFP_filter_file.close()
   }
   
  } 
  
  LFPwrite()
  
  proc pulsewrite() {localobj pulse_file,LFP_filter_file,lfpvec,lfpvec_filter
 if(pc.id==0){     //open write files on host 0
   strdef pulse_time
   sprint(pulse_time,"./pulse/pulsetime") 
   pulse_file=new File()
   pulse_file.wopen(pulse_time)

   pulse_times.printf(pulse_file)

 
        
   pulse_file.close()
   }
   
  }
  pulsewrite()
  
objref afffile_PN,afffile_ITN,affcollect_vec_PN,affcollect_vec_ITN

afffile_PN = new File("Possionaff_PN")
afffile_ITN = new File("Possionaff_ITN")

  proc affwrite_bynode() {localobj pulse_file,LFP_filter_file,lfpvec,lfpvec_filter

if(pc.id==0){     //"wopen" once by node 0 to clear the contents of the file
afffile_PN.wopen()
afffile_PN.close()

afffile_ITN.wopen()
afffile_ITN.close()

}

pc.barrier() // wait for all hosts to get to this point

 for rank=0, pc.nhost-1 { // host 0 first, then 1, 2, etc.
	affcollect_vec_PN=new Vector()	///to collect all PN aff vec on this node
    affcollect_vec_ITN=new Vector()	///to collect all ITN aff vec on this node

 if (rank==pc.id) {
//print "pc.id: ", rank
 for rr=0,afflist_PN.count()- 1 {
 affcollect_vec_PN.append(afflist_PN.o(rr))
 }
 
 for rr=0,afflist_ITN.count()- 1 {
 affcollect_vec_ITN.append(afflist_ITN.o(rr))
 }
 afffile_PN.aopen()
 affcollect_vec_PN.printf(afffile_PN,"%f\n")
 afffile_PN.close()
 
 afffile_ITN.aopen()
 affcollect_vec_ITN.printf(afffile_ITN,"%f\n")
 afffile_ITN.close()
 
}
pc.barrier()


}
  }
  affwrite_bynode()
  
 //affwrite_bynodeandID()
   
  //pc.barrier () 
  //}

/*strdef cmd
proc writeLFP() { localobj f, lfpvec, lfptrace
    sprint(cmd,"lfp_realtime.dat")
    f = new File(cmd)
    f.wopen()
    
    // Open for appending to file
    for i=0, lfplist.count()-1 {
        lfpvec = lfplist.o(i)
		f.printf("%g\t%g\n", lfpvec.x[0], lfpvec.x[1])	// Prints time and average LFP value
    }
    f.close()
 }
 
 writeLFP() */
 
 /////save voltage////
objref f_volt
strdef vols

proc SavVol() { local i,d 

for i = 0,cell_plots-1 {
op = op_rec.x[i]
if(pc.gid_exists(op)){
sprint(vols,"./volts/volts_%d",op) 
f_volt = new File()
f_volt.wopen(vols)
d = vollist.index(Volrec[op])
vollist.o[d].printf(f_volt)
f_volt.close()  
}
}
}
//SavVol()

/////noise record
initbgnoiserecord()
avebgnoise()
bgnoisewrite()
//////aff curr record
initaffcurrrecord()
aveaffcurr()
affcurrwrite()

// PROCEDURE TO SEND SPIKES TO A FILE "SPIKERASTER"--------
objref spikefile

spikefile = new File("data")

if(pc.id==0){     //"wopen" once by node 0 to clear the contents of the file
spikefile.wopen()
spikefile.close()
}


proc spikefileout() { local i, rank
pc.barrier() // wait for all hosts to get to this point

for rank=0, pc.nhost-1 { // host 0 first, then 1, 2, etc.

if (rank==pc.id) {
for i=0, tvec.size-1 {
spikefile.aopen()                               //"aopen" to append data
spikefile.printf("%8.4f\t %d\n", tvec.x[i], idvec.x[i])
spikefile.close()
}
}
pc.barrier() // wait for all hosts to get to this point
}
}

 strdef cmd
proc spikefileout_parallel() {local i  localobj f
	sprint(cmd,"./spkresults/spkraster_%g.dat", pc.id)
	f = new File(cmd)
	f.wopen()
	for i=0, idvec.size-1 {
		f.printf("%8.4f\t %d\n", tvec.x[i], idvec.x[i])	// Print the spike time and spiking cell gid
	}
}

if (savingspikesep==0) {         
spikefileout()
}else {
spikefileout_parallel()
}

{pc.runworker()}
{pc.done()}